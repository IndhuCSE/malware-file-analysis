import os
import subprocess
import requests
import time
import hashlib
import tkinter as tk
from tkinter import filedialog, scrolledtext, messagebox

API_KEY = 'f841c5e705618d2392bc26b7dc134375267d27f850c09842e7055cf605a57dc4'
BASE_URL = 'https://www.virustotal.com/vtapi/v2/'

def check_strings_in_path():
    try:
        result = subprocess.run(['where', 'strings'], capture_output=True, text=True)
        if result.returncode == 0:
            return "Strings command found at: " + result.stdout
        else:
            return "Strings command not found in PATH."
    except Exception as e:
        return f"Error checking strings in PATH: {e}"

def submit_file(file_path):
    url = BASE_URL + 'file/scan'
    files = {'file': (file_path, open(file_path, 'rb'))}
    params = {'apikey': API_KEY}
    response = requests.post(url, files=files, params=params)
    return response.json()

def get_report(resource):
    url = BASE_URL + 'file/report'
    params = {'apikey': API_KEY, 'resource': resource}
    response = requests.get(url, params=params)
    return response.json()

def calculate_hashes(file_path):
    hashes = {
        'md5': hashlib.md5(),
        'sha1': hashlib.sha1(),
        'sha256': hashlib.sha256()
    }
    
    with open(file_path, 'rb') as f:
        for block in iter(lambda: f.read(4096), b''):
            for hash_func in hashes.values():
                hash_func.update(block)
    
    return {name: hash_func.hexdigest() for name, hash_func in hashes.items()}

def extract_strings(file_path):
    strings_executable = r'C:\SysinternalsSuite\strings.exe'
    
    if not os.path.isfile(strings_executable):
        raise FileNotFoundError(f"The strings executable not found at path: {strings_executable}")
    
    try:
        result = subprocess.run([strings_executable, file_path], capture_output=True, text=True)
        return result.stdout
    except Exception as e:
        return f"Error running strings: {e}"

def static_analysis(file_path):
    analysis_results = []

    analysis_results.append(f"Analyzing file: {file_path}")
    
    hashes = calculate_hashes(file_path)
    analysis_results.append(f"Hashes: {hashes}")
    
    strings = extract_strings(file_path)
    if strings:
        analysis_results.append(f"Strings: {strings[:1000]}")  # First 1000 characters for brevity
    else:
        analysis_results.append("No strings found or error running strings command.")
    
    return '\n'.join(analysis_results)

def dynamic_analysis(file_path):
    analysis_results = []

    analysis_results.append(f"Submitting file: {file_path} to VirusTotal")
    response = submit_file(file_path)
    analysis_results.append(f"Submission Response: {response}")

    resource = response['resource']
    report = None

    analysis_results.append("Waiting for analysis report...")
    while True:
        report = get_report(resource)
        if report['response_code'] == 1 and report['verbose_msg'] == 'Scan finished, information embedded':
            break
        time.sleep(30)  # Wait 30 seconds before checking again

    md5 = report['md5']
    sha1 = report['sha1']
    sha256 = report['sha256']
    scan_date = report['scan_date']
    total = report['total']
    positives = report['positives']
    permalink = report['permalink']
    
    scanners_report = '\n'.join([f"{scanner}: {result['result']}" for scanner, result in report['scans'].items()])
    
    analysis_results.append("VirusTotal Analysis Report:")
    analysis_results.append(f"MD5: {md5}")
    analysis_results.append(f"SHA1: {sha1}")
    analysis_results.append(f"SHA256: {sha256}")
    analysis_results.append(f"Scan Date: {scan_date}")
    analysis_results.append(f"Total Scanners: {total}")
    analysis_results.append(f"Positives: {positives}")
    analysis_results.append(f"VirusTotal Link: {permalink}")
    analysis_results.append("Scanners Report:")
    analysis_results.append(scanners_report)
    
    return '\n'.join(analysis_results)

def analyze_file(file_path):
    static_results = static_analysis(file_path)
    dynamic_results = dynamic_analysis(file_path)
    return static_results + '\n' + dynamic_results

def select_file():
    file_path = filedialog.askopenfilename()
    if file_path:
        results = analyze_file(file_path)
        result_text.config(state=tk.NORMAL)
        result_text.delete(1.0, tk.END)
        insert_formatted_text(results)
        result_text.config(state=tk.DISABLED)

def insert_formatted_text(results):
    # Split the results into lines
    lines = results.split('\n')
    for line in lines:
        if ':' in line:
            heading, content = line.split(':', 1)
            result_text.insert(tk.END, heading + ":", 'heading')
            result_text.insert(tk.END, content + "\n", 'content')
        else:
            result_text.insert(tk.END, line + "\n", 'content')

if __name__ == "__main__":
    root = tk.Tk()
    root.title("File Analysis Tool")

    frame = tk.Frame(root, padx=10, pady=10)
    frame.pack(padx=10, pady=10)

    select_button = tk.Button(frame, text="Select File", command=select_file)
    select_button.pack()

    result_text = scrolledtext.ScrolledText(frame, wrap=tk.WORD, width=100, height=30, font=("Helvetica", 10, "bold"))
    result_text.pack(pady=10)
    result_text.config(state=tk.DISABLED)

    # Define custom tags for formatting
    result_text.tag_config('heading', foreground='darkgrey', font=("Helvetica", 15, "bold"))
    result_text.tag_config('content', foreground='black', font=("Helvetica", 15, "normal"))

    root.mainloop()
